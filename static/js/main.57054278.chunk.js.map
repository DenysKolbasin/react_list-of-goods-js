{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","goodsWithId","map","item","index","id","name","useState","sortField","setSortField","isReversed","setIsReversed","filteredAndSortedGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","sortedGoodsBy","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SA2BnB,IAAMC,EAAM,WACjB,IAAMC,EAAcJ,EAAgBK,KAAI,SAACC,EAAMC,GAAP,MAAkB,CACxDC,GAAID,EAAQ,EACZE,KAAMH,MAGR,EAAkCI,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAlCR,SAAuBC,EAAOL,EAAWE,GACvC,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKV,EACH,OAAOkB,EAAMV,KAAKY,cAAcD,EAAMX,MAExC,KAAKP,EACH,OAAOiB,EAAMV,KAAKa,OAASF,EAAMX,KAAKa,OAExC,QACE,OAAO,MAKXT,GACFI,EAAcM,UAGTN,EAYwBO,CAC7BpB,EACAO,EACAE,GAQF,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBAAkB,CAChB,WAAYhB,IAAcV,IAG9B2B,QAAS,WACPhB,EAAaX,IARjB,iCAcA,wBACEyB,KAAK,SACLD,UAAWE,IACT,oBAAqB,CACnB,WAAYhB,IAAcT,IAG9B0B,QAAS,WACPhB,EAAaV,IARjB,4BAcA,wBACEwB,KAAK,SACLD,UAAWE,IACT,oBAAqB,CACnB,YAAad,IAGjBe,QAAS,kBAAMd,GAAeD,IAPhC,sBAYEF,GAAaE,IACb,wBACEa,KAAK,SACLD,UAAU,4BACVG,QApDQ,WAChBhB,EAAa,IACbE,GAAc,IA+CR,sBAUJ,6BACG,YAAIC,GAAwBV,KAAI,gBAAGG,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OAC/B,oBAEE,UAAQ,OAFV,SAIGA,GAHID,YCxHjBqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.57054278.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction sortedGoodsBy(goods, sortField, isReversed) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.name.localeCompare(good2.name);\n\n        case SORT_FIELD_LENGTH:\n          return good1.name.length - good2.name.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const goodsWithId = goodsFromServer.map((item, index) => ({\n    id: index + 1,\n    name: item,\n  }));\n\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const filteredAndSortedGoods = sortedGoodsBy(\n    goodsWithId,\n    sortField,\n    isReversed,\n  );\n\n  const resetSort = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info', {\n              'is-light': sortField !== SORT_FIELD_ALPHABET,\n            },\n          )}\n          onClick={() => {\n            setSortField(SORT_FIELD_ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success', {\n              'is-light': sortField !== SORT_FIELD_LENGTH,\n            },\n          )}\n          onClick={() => {\n            setSortField(SORT_FIELD_LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning', {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetSort}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {[...filteredAndSortedGoods].map(({ id, name }) => (\n          <li\n            key={id}\n            data-cy=\"Good\"\n          >\n            {name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}